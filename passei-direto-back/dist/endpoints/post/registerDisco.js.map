{"version":3,"sources":["../../../src/endpoints/post/registerDisco.js"],"names":["requestBodyValidation","artista","requestBody","album","tempoExecucao","isNaN","logger","warn","main","request","response","body","anoLancamento","gravadora","discoDao","DiscoDao","insertDisco","then","info","status","send","catch","error","json","message","route"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,wBAAwB,SAAxBA,qBAAwB,cAAe;AAAA,MACnCC,OADmC,GACDC,WADC,CACnCD,OADmC;AAAA,MAC1BE,KAD0B,GACDD,WADC,CAC1BC,KAD0B;AAAA,MACnBC,aADmB,GACDF,WADC,CACnBE,aADmB;;AAE3C,UAAQ,IAAR;AACE,SAAKC,MAAMD,aAAN,CAAL;AACEE,uBAAOC,IAAP,CAAY,qCAAZ;AACA,aAAO,KAAP;AACF,SAAK,CAACN,OAAD,IAAY,CAACE,KAAlB;AACEG,uBAAOC,IAAP,CAAY,kDAAZ;AACA,aAAO,KAAP;AACF;AACE,aAAO,IAAP;AARJ;AAUD,CAZD;;AAcA,IAAMC,OAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAClC,MAAIV,sBAAsBS,QAAQE,IAA9B,CAAJ,EAAyC;AAAA,wBAOnCF,QAAQE,IAP2B;AAAA,QAErCV,OAFqC,iBAErCA,OAFqC;AAAA,QAGrCE,KAHqC,iBAGrCA,KAHqC;AAAA,QAIrCS,aAJqC,iBAIrCA,aAJqC;AAAA,QAKrCC,SALqC,iBAKrCA,SALqC;AAAA,QAMrCT,aANqC,iBAMrCA,aANqC;;AAQvC,QAAMU,WAAW,IAAIC,eAAJ,EAAjB;AACAD,aACGE,WADH,CACef,OADf,EACwBE,KADxB,EAC+BS,aAD/B,EAC8CC,SAD9C,EACyDT,aADzD,EAEGa,IAFH,CAEQ,YAAM;AACVX,uBAAOY,IAAP,CAAY,+BAAZ;AACAR,eAASS,MAAT,CAAgB,GAAhB,EAAqBC,IAArB;AACD,KALH,EAMGC,KANH,CAMS,iBAAS;AACdf,uBAAOgB,KAAP,CAAaA,KAAb;AACAZ,eAASS,MAAT,CAAgB,GAAhB,EAAqBI,IAArB,CAA0B;AACxBD,eAAO,GADiB;AAExBE,iBACE;AAHsB,OAA1B;AAKD,KAbH;AAcD,GAvBD,MAuBO;AACLd,aAASS,MAAT,CAAgB,GAAhB,EAAqBI,IAArB,CAA0B;AACxBD,aAAO,GADiB;AAExBE,eAAS;AAFe,KAA1B;AAID;AACF,CA9BD;;kBAgCe;AACbC,SAAO,gBADM;AAEbjB;AAFa,C","file":"registerDisco.js","sourcesContent":["import DiscoDao from '../../model/Disco';\nimport logger from '../../utils/logger';\n\nconst requestBodyValidation = requestBody => {\n  const { artista, album, tempoExecucao } = requestBody;\n  switch (true) {\n    case isNaN(tempoExecucao):\n      logger.warn(' POST request received with NaN id ');\n      return false;\n    case !artista || !album:\n      logger.warn(' POST request received without fields to update ');\n      return false;\n    default:\n      return true;\n  }\n};\n\nconst main = (request, response) => {\n  if (requestBodyValidation(request.body)) {\n    const {\n      artista,\n      album,\n      anoLancamento,\n      gravadora,\n      tempoExecucao,\n    } = request.body;\n    const discoDao = new DiscoDao();\n    discoDao\n      .insertDisco(artista, album, anoLancamento, gravadora, tempoExecucao)\n      .then(() => {\n        logger.info('Register included in Database');\n        response.status(200).send();\n      })\n      .catch(error => {\n        logger.error(error);\n        response.status(500).json({\n          error: 500,\n          message:\n            'Internal Server Error - Please contact the system administrator',\n        });\n      });\n  } else {\n    response.status(400).json({\n      error: 400,\n      message: 'Error while processing request body',\n    });\n  }\n};\n\nexport default {\n  route: '/registerDisco',\n  main,\n};\n"]}