{"version":3,"sources":["../../../src/endpoints/put/searchDisco.js"],"names":["requestBodyValidation","requestBody","page","logger","warn","isNaN","searchWord","main","request","response","body","discoDao","DiscoDao","getCountDiscosWhere","then","findDisco","status","json","discoCount","res","countDisco","result","catch","error","message","route"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,wBAAwB,SAAxBA,qBAAwB,cAAe;AAC3C,UAAQ,IAAR;AACE,SAAK,CAACC,YAAYC,IAAlB;AACEC,uBAAOC,IAAP,CAAY,oCAAZ;AACA,aAAO,KAAP;AACF,SAAKC,MAAMJ,YAAYC,IAAlB,CAAL;AACEC,uBAAOC,IAAP,CAAY,qCAAZ;AACA,aAAO,KAAP;AACF,SAAKH,YAAYC,IAAZ,IAAoB,CAAzB;AACEC,uBAAOC,IAAP,CAAY,iDAAZ;AACA,aAAO,KAAP;AACF,SAAK,CAACH,YAAYK,UAAlB;AACEH,uBAAOC,IAAP,CAAY,0CAAZ;AACA,aAAO,KAAP;AACF;AACE,aAAO,IAAP;AAdJ;AAgBD,CAjBD;;AAmBA,IAAMG,OAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAClC,MAAIT,sBAAsBQ,QAAQE,IAA9B,CAAJ,EAAyC;AACvC,QAAMC,WAAW,IAAIC,eAAJ,EAAjB;AADuC,wBAEVJ,QAAQE,IAFE;AAAA,QAE/BJ,UAF+B,iBAE/BA,UAF+B;AAAA,QAEnBJ,IAFmB,iBAEnBA,IAFmB;;AAGvCS,aACGE,mBADH,CACuBP,UADvB,EAEGQ,IAFH,CAEQ,eAAO;AACXH,eAASI,SAAT,CAAmBT,UAAnB,EAA+BJ,IAA/B,EAAqCY,IAArC,CAA0C,kBAAU;AAClDL,iBAASO,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBC,sBAAYC,IAAI,CAAJ,EAAOC,UADK;AAExBC;AAFwB,SAA1B;AAID,OALD;AAMD,KATH,EAUGC,KAVH,CAUS,iBAAS;AACdb,eAASO,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBM,eAAO,GADiB;AAExBC,iBACE;AAHsB,OAA1B;AAKD,KAhBH;AAiBD,GApBD,MAoBO;AACLf,aAASO,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACxBM,aAAO,GADiB;AAExBC,eAAS;AAFe,KAA1B;AAID;AACF,CA3BD;;kBA6Be;AACbC,SAAO,cADM;AAEblB;AAFa,C","file":"searchDisco.js","sourcesContent":["import DiscoDao from '../../model/Disco';\nimport logger from '../../utils/logger';\n\nconst requestBodyValidation = requestBody => {\n  switch (true) {\n    case !requestBody.page:\n      logger.warn('POST request without page received');\n      return false;\n    case isNaN(requestBody.page):\n      logger.warn('POST request with NaN page received');\n      return false;\n    case requestBody.page <= 0:\n      logger.warn('POST request with wrong format of page received');\n      return false;\n    case !requestBody.searchWord:\n      logger.warn('POST request without searchWord received');\n      return false;\n    default:\n      return true;\n  }\n};\n\nconst main = (request, response) => {\n  if (requestBodyValidation(request.body)) {\n    const discoDao = new DiscoDao();\n    const { searchWord, page } = request.body;\n    discoDao\n      .getCountDiscosWhere(searchWord)\n      .then(res => {\n        discoDao.findDisco(searchWord, page).then(result => {\n          response.status(200).json({\n            discoCount: res[0].countDisco,\n            result,\n          });\n        });\n      })\n      .catch(error => {\n        response.status(500).json({\n          error: 500,\n          message:\n            'Internal Server Error - Please contact the system administrator',\n        });\n      });\n  } else {\n    response.status(400).json({\n      error: 400,\n      message: 'Error while processing request body',\n    });\n  }\n};\n\nexport default {\n  route: '/searchDisco',\n  main,\n};\n"]}