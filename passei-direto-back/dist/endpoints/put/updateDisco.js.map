{"version":3,"sources":["../../../src/endpoints/put/updateDisco.js"],"names":["requestBodyValidation","id","requestBody","artista","album","anoLancamento","gravadora","tempoExecucao","logger","warn","isNaN","main","request","response","body","discoDao","DiscoDao","updateDisco","then","info","status","send","catch","error","json","message","route"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,wBAAwB,SAAxBA,qBAAwB,cAAe;AAAA,MAEzCC,EAFyC,GAQvCC,WARuC,CAEzCD,EAFyC;AAAA,MAGzCE,OAHyC,GAQvCD,WARuC,CAGzCC,OAHyC;AAAA,MAIzCC,KAJyC,GAQvCF,WARuC,CAIzCE,KAJyC;AAAA,MAKzCC,aALyC,GAQvCH,WARuC,CAKzCG,aALyC;AAAA,MAMzCC,SANyC,GAQvCJ,WARuC,CAMzCI,SANyC;AAAA,MAOzCC,aAPyC,GAQvCL,WARuC,CAOzCK,aAPyC;;AAS3C,UAAQ,IAAR;AACE,SAAK,CAACN,EAAN;AACEO,uBAAOC,IAAP,CAAY,mCAAZ;AACA,aAAO,KAAP;AACF,SAAKC,MAAMT,EAAN,CAAL;AACEO,uBAAOC,IAAP,CAAY,oCAAZ;AACA,aAAO,KAAP;AACF,SAAK,CAACN,OAAD,IAAY,CAACC,KAAb,IAAsB,CAACC,aAAvB,IAAwC,CAACC,SAAzC,IAAsD,CAACC,aAA5D;AACEC,uBAAOC,IAAP,CAAY,0DAAZ;AACA,aAAO,KAAP;AACF;AACE,aAAO,IAAP;AAXJ;AAaD,CAtBD;;AAwBA,IAAME,OAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAClC,MAAIb,sBAAsBY,QAAQE,IAA9B,CAAJ,EAAyC;AAAA,wBAQnCF,QAAQE,IAR2B;AAAA,QAErCb,EAFqC,iBAErCA,EAFqC;AAAA,QAGrCE,OAHqC,iBAGrCA,OAHqC;AAAA,QAIrCC,KAJqC,iBAIrCA,KAJqC;AAAA,QAKrCC,aALqC,iBAKrCA,aALqC;AAAA,QAMrCC,SANqC,iBAMrCA,SANqC;AAAA,QAOrCC,aAPqC,iBAOrCA,aAPqC;;AASvC,QAAMQ,WAAW,IAAIC,eAAJ,EAAjB;AACAD,aACGE,WADH,CACehB,EADf,EACmBE,OADnB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,SADlD,EAC6DC,aAD7D,EAEGW,IAFH,CAEQ,YAAM;AACVV,uBAAOW,IAAP,CAAY,8BAAZ;AACAN,eAASO,MAAT,CAAgB,GAAhB,EAAqBC,IAArB;AACD,KALH,EAMGC,KANH,CAMS,iBAAS;AACdd,uBAAOe,KAAP,CAAaA,KAAb;AACAV,eAASO,MAAT,CAAgB,GAAhB,EAAqBI,IAArB,CAA0B;AACxBD,eAAO,GADiB;AAExBE,iBACE;AAHsB,OAA1B;AAKD,KAbH;AAcD,GAxBD,MAwBO;AACLZ,aAASO,MAAT,CAAgB,GAAhB,EAAqBI,IAArB,CAA0B;AACxBD,aAAO,GADiB;AAExBE,eAAS;AAFe,KAA1B;AAID;AACF,CA/BD;;kBAiCe;AACbC,SAAO,cADM;AAEbf;AAFa,C","file":"updateDisco.js","sourcesContent":["import DiscoDao from '../../model/Disco';\nimport logger from '../../utils/logger';\n\nconst requestBodyValidation = requestBody => {\n  const {\n    id,\n    artista,\n    album,\n    anoLancamento,\n    gravadora,\n    tempoExecucao,\n  } = requestBody;\n  switch (true) {\n    case !id:\n      logger.warn(' PUT request received without id ');\n      return false;\n    case isNaN(id):\n      logger.warn(' PUT request received with NaN id ');\n      return false;\n    case !artista && !album && !anoLancamento && !gravadora && !tempoExecucao:\n      logger.warn(' PUT request received without fields to update received ');\n      return false;\n    default:\n      return true;\n  }\n};\n\nconst main = (request, response) => {\n  if (requestBodyValidation(request.body)) {\n    const {\n      id,\n      artista,\n      album,\n      anoLancamento,\n      gravadora,\n      tempoExecucao,\n    } = request.body;\n    const discoDao = new DiscoDao();\n    discoDao\n      .updateDisco(id, artista, album, anoLancamento, gravadora, tempoExecucao)\n      .then(() => {\n        logger.info('Register updated in Database');\n        response.status(200).send();\n      })\n      .catch(error => {\n        logger.error(error);\n        response.status(500).json({\n          error: 500,\n          message:\n            'Internal Server Error - Please contact the system administrator',\n        });\n      });\n  } else {\n    response.status(400).json({\n      error: 400,\n      message: 'Error while processing request body',\n    });\n  }\n};\n\nexport default {\n  route: '/updateDisco',\n  main,\n};\n"]}