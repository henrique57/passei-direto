{"version":3,"sources":["../../src/model/Disco.js"],"names":["ARTISTA_TAG","ALBUM_TAG","ANO_TAG","GRAVADORA_TAG","ID_TAG","OFFSET_TAG","SEARCH_WORD","MAX_NUMBER_ROWS_PAGINATION","FIELDS_TAG","INSERT_VALUES_TAG","UPDATE_FIELDS","INSERT_QUERY","COUNT_ALL_QUERY","COUNT_ALL_WHERY_QUERY","SELECT_QUERY","UPDATE_QUERY","DELETE_QUERY","SEARCH_QUERY","PAGINATION_PART","DiscoDao","query","connection","mysql","createConnection","host","process","env","MYSQL_HOST","port","MYSQL_PORT","database","MYSQL_DATABASE","user","MYSQL_USER","password","MYSQL_PASSWORD","then","conn","end","result","page","replace","searchWord","validator","data","field","oldQuery","fieldToConcat","id","artista","album","anoLancamento","gravadora","tempoExecucao","_fieldFormatter","_putComma","fields","concat","value","_executeQuery","_getSearchQuery","_getPaginateQuery","_getUpdateStatement","_getInsertStatement"],"mappings":"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","file":"Disco.js","sourcesContent":["import mysql from 'promise-mysql';\nimport logger from '../utils/logger';\n\nconst ARTISTA_TAG = 'ARTISTA_TAG';\nconst ALBUM_TAG = 'ALBUM_TAG';\nconst ANO_TAG = 'ANO_TAG';\nconst GRAVADORA_TAG = 'GRAVADORA_TAG';\nconst ID_TAG = 'ID_TAG';\nconst OFFSET_TAG = 'OFFSET_TAG';\nconst SEARCH_WORD = 'SEARCH_WORD';\nconst MAX_NUMBER_ROWS_PAGINATION = 10;\nconst FIELDS_TAG = 'FIEDS_TAG';\nconst INSERT_VALUES_TAG = 'INSERT_VALUES_TAG';\nconst UPDATE_FIELDS = 'UPDATE_FIELDS';\n\nconst INSERT_QUERY = `INSERT INTO disco (${FIELDS_TAG}) VALUES (${INSERT_VALUES_TAG})`;\n\nconst COUNT_ALL_QUERY = 'SELECT COUNT(*) as countDisco from disco';\n\nconst COUNT_ALL_WHERY_QUERY =\n  'SELECT COUNT(*) as countDisco from disco WHERE artista LIKE \"%SEARCH_WORD%\" OR album LIKE \"%SEARCH_WORD%\"';\n\nconst SELECT_QUERY = 'SELECT * FROM disco';\n\nconst UPDATE_QUERY = `UPDATE disco SET ${UPDATE_FIELDS} WHERE id=${ID_TAG}`;\n\nconst DELETE_QUERY = `DELETE FROM disco WHERE id=${ID_TAG}`;\n\nconst SEARCH_QUERY = `SELECT * FROM disco WHERE artista LIKE \"%${SEARCH_WORD}%\" OR album LIKE \"%${SEARCH_WORD}%\"`;\n\nconst PAGINATION_PART = `LIMIT ${MAX_NUMBER_ROWS_PAGINATION} OFFSET ${OFFSET_TAG}`;\n\nexport default class DiscoDao {\n  _executeQuery(query) {\n    let connection;\n    return mysql\n      .createConnection({\n        host: process.env.MYSQL_HOST,\n        port: process.env.MYSQL_PORT,\n        database: process.env.MYSQL_DATABASE,\n        user: process.env.MYSQL_USER,\n        password: process.env.MYSQL_PASSWORD,\n      })\n      .then(conn => {\n        connection = conn;\n        return connection.query(query);\n      })\n      .then(result => {\n        connection.end();\n        return result;\n      });\n  }\n\n  _getPaginateQuery(query, page) {\n    return `${query} ${PAGINATION_PART.replace(\n      OFFSET_TAG,\n      (page - 1) * MAX_NUMBER_ROWS_PAGINATION\n    )}`;\n  }\n\n  _getSearchQuery(query, searchWord) {\n    return query\n      .replace(SEARCH_WORD, searchWord)\n      .replace(SEARCH_WORD, searchWord);\n  }\n\n  // Verifica se é necessário colocar vírgula antes do dado\n  _putComma(validator, data) {\n    return validator ? `, ${data}` : data;\n  }\n\n  _fieldFormatter(field, oldQuery, fieldToConcat) {\n    return !field ? oldQuery : oldQuery + fieldToConcat;\n  }\n\n  _getUpdateStatement(\n    id,\n    artista,\n    album,\n    anoLancamento,\n    gravadora,\n    tempoExecucao\n  ) {\n    let query = this._fieldFormatter(artista, '', `artista='${artista}'`);\n\n    query = this._fieldFormatter(\n      album,\n      query,\n      this._putComma(artista, `album='${album}'`)\n    );\n\n    query = this._fieldFormatter(\n      anoLancamento,\n      query,\n      this._putComma(artista || album, `ano_lancamento='${anoLancamento}'`)\n    );\n\n    query = this._fieldFormatter(\n      gravadora,\n      query,\n      this._putComma(\n        artista || album || anoLancamento,\n        `gravadora='${gravadora}'`\n      )\n    );\n\n    query = this._fieldFormatter(\n      tempoExecucao,\n      query,\n      this._putComma(\n        artista || album || anoLancamento || gravadora,\n        `tempo_execucao=${tempoExecucao}`\n      )\n    );\n\n    query = UPDATE_QUERY.replace(UPDATE_FIELDS, query);\n\n    query = query.replace(ID_TAG, id);\n\n    return query;\n  }\n\n  _getInsertStatement(artista, album, anoLancamento, gravadora, tempoExecucao) {\n    let fields = 'artista, album';\n    fields = anoLancamento ? fields.concat(', ano_lancamento') : fields;\n    fields = gravadora ? fields.concat(', gravadora') : fields;\n    fields = tempoExecucao ? fields.concat(', tempo_execucao') : fields;\n\n    let value = `'${artista}', '${album}'`;\n    value = anoLancamento ? value.concat(`, '${anoLancamento}'`) : value;\n    value = gravadora ? value.concat(`, '${gravadora}'`) : value;\n    value = tempoExecucao ? value.concat(`, '${tempoExecucao}'`) : value;\n\n    return INSERT_QUERY.replace(FIELDS_TAG, fields).replace(\n      INSERT_VALUES_TAG,\n      value\n    );\n  }\n\n  getCountDiscos() {\n    return this._executeQuery(COUNT_ALL_QUERY);\n  }\n\n  getCountDiscosWhere(searchWord) {\n    let query = this._getSearchQuery(COUNT_ALL_WHERY_QUERY, searchWord);\n    return this._executeQuery(query);\n  }\n\n  selectAll(page) {\n    return this._executeQuery(this._getPaginateQuery(SELECT_QUERY, page));\n  }\n\n  findDisco(searchWord, page) {\n    let query = this._getSearchQuery(SEARCH_QUERY, searchWord);\n    query = this._getPaginateQuery(query, page);\n    return this._executeQuery(query);\n  }\n\n  updateDisco(id, artista, album, anoLancamento, gravadora, tempoExecucao) {\n    let query = this._getUpdateStatement(\n      id,\n      artista,\n      album,\n      anoLancamento,\n      gravadora,\n      tempoExecucao\n    );\n    return this._executeQuery(query);\n  }\n\n  insertDisco(artista, album, anoLancamento, gravadora, tempoExecucao) {\n    let query = this._getInsertStatement(\n      artista,\n      album,\n      anoLancamento,\n      gravadora,\n      tempoExecucao\n    );\n    return this._executeQuery(query);\n  }\n\n  deleteDisco(id) {\n    let query = DELETE_QUERY.replace(ID_TAG, id);\n    return this._executeQuery(query);\n  }\n}\n"]}